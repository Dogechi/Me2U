
Dump whole database in to a db.json file
    -manage.py dumpdata > db.json

 dump the content in django admin app into admin.json file
    -./manage.py dumpdata admin > admin.json

Dumpdata for backup specific table
Following command will dump only the content in django admin.logentry table
    ./manage.py dumpdata admin.logentry > logentry.json

    ./manage.py dumpdata auth.user > user.json

Dumpdata (--format)
By default, dumpdata will format its output in JSON

You can specify the format using --format option

Command supports for following formats(serialization formats)

json
xml
yaml
./manage.py dumpdata auth.user --indent 2 --format xml > user.xml

Restore fresh database
When you backup whole database by using dumpdata command, it will backup all the database tables

If you use this database dump to load the fresh database(in another django project), it can be causes IntegrityError (If you loaddata in same database it works fine)

To fix this problem, make sure to backup the database by excluding contenttypes and auth.permissions tables

./manage.py dumpdata --exclude auth.permission --exclude contenttypes > db.json
manage.py dumpdata --exclude auth.permission --exclude contenttypes > categories/fixtures/ db.json


Now you can use loaddata command with a fresh database

./manage.py loaddata db.json


CURRENCIES
python manage.py currencies --import=USD --import=EUR


update exchange rates
python manage.py updatecurrencies oxr --base=USD

SQL MIGRATE COMMANDS

- you have to know the model and the migration number you want to view the sql migration for

- manage.py sqlmigrate model migration_number i.e manage.py sqlmigrate blog 0001

ACTIVATE VIRTUAL ENV

pip install virtualenv

2. For Create a venv run this virtualenv -p python3 venv
3. Activate virtualenv venv\Scripts\activate
4. It will look like this (venv) C:\Users\user\Desktop\UserDjangoProject>
5. pip install --force-reinstall --ignore-installed --no-deps -r requirements.txt
6. Run the django project run this./manage.py runserver

PIP INSTALL

$ python -m pip install --force-reinstall --ignore-installed --upgrade --no-index --no-deps

VIRTUAL ENV
venv\Scripts\activate

git push origin +1cc6e86^:me2udev revert changes by deleting the latest

git branch -D  branchname

flushing cache heroku
curl "https://analytics.memcachier.com/api/v1/login" --user "653655:EC5B884EB0B5E2B9C1D1B661F85134E2"

after obtaining id...
curl "https://analytics.memcachier.com/api/v1/ 751364/flush" -X POST --user "653655:EC5B884EB0B5E2B9C1D1B661F85134E2"

deploy hook heroku:

heroku addons:create deployhooks:http --url="https://653655:EC5B884EB0B5E2B9C1D1B661F85134E2@analytics.memcachier.com/api/v1//751364/flush"


Flushing a MemCachier Cache on Deployment:
    curl "https://analytics.memcachier.com/api/v1/login" --user "25BA4A:E7028E87B5ABCF70DB076A8398E0690A"

    after obtaining id...
    curl "https://analytics.memcachier.com/api/v1/751569/flush" -X POST --user "25BA4A:E7028E87B5ABCF70DB076A8398E0690A"

    deploy hook heroku:

    heroku addons:create deployhooks:http --url="https://25BA4A:E7028E87B5ABCF70DB076A8398E0690A@analytics.memcachier.com/api/v1//751569/flush"



CREATING EMPTY MIGRATIONS
python manage.py makemigrations users --empty

# Generated by Django 3.1.1 on 2021-06-04 14:28

from django.db import migrations

def migrate_seller_profile_user_relations(apps, schema_editor):
    SellerProfile = apps.get_model('users', 'SellerProfile')
    Profile = apps.get_model('users', 'Profile')
    Brand = apps.get_model('me2ushop', 'Brand')

    for seller_profile in SellerProfile.objects.all():
        profile = Profile.objects.get_or_create(user=seller_profile.user)
        if profile:
            profile = profile[0]
            print('profile:', profile)
            profile.first_name = seller_profile.first_name
            profile.last_name = seller_profile.last_name
            profile.phone = seller_profile.phone
            profile.save()

            brands = seller_profile.brand_set.all()

            for brand in brands:
                brand.profile = profile
                brand.business_email = seller_profile.email
                brand.business_phone = seller_profile.phone
                brand.application_status = seller_profile.application_status
                brand.user = None
                brand.save()

    SellerProfile.objects.all().delete()



class Migration(migrations.Migration):

    dependencies = [
        ('users', '0019_auto_20210604_1623'),
    ]

    operations = [
        migrations.RunPython(migrate_seller_profile_user_relations, migrations.RunPython.noop)
    ]

